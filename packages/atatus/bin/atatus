#!/usr/bin/env node

const doc = `atatus

Uploads each sourcemap (**/*.js.map) found in <dir> to Atatus. Assumes the public URL
of the minified file is <public-path>/sourcemap-filename.js (drops ".map" extension).

For example:
    $ atatus build/ http://cdn.example.com/somewhere/ --admin-api-key=...
URL of the minified file:
    build/foo.js.map => http://cdn.example.com/somewhere/foo.js
    build/hello/world.js.map => http://cdn.example.com/somewhere/hello/world.js

See https://www.atatus.com/docs/sourcemaps for more details

Usage:
    atatus <dir> <public-path> [--version=STRING]
    atatus -h | --help

Options:
    --admin-api-key=STRING    Your project access token from Atatus (defaults to $ATATUS_ADMIN_API_KEY)
    --version=STRING          A string identifying what version of your code this source map package is for
    -h --help  Show this screen.
`

var { docopt } = require('docopt')
var fs = require('fs')
var path = require('path')
var request = require('request')
var sh = require('shelljs')
var retry = require('async-retry').default
sh.config.fatal = true

const args = docopt(doc)
const adminApiKey = args['--admin-api-key'] || sh.env.ATATUS_ADMIN_API_KEY
const files = sh.find(args['<dir>']).filter(function (file) {
    return file.match(/\.js\.map$/)
})

if (!adminApiKey) throw new Error('Missing --admin-api-key')
if (!files.length) {
    sh.echo('No sourcemap files (*.js.map) to upload')
    sh.exit(0)
}

console.log(`Uploading ${files.length} file(s):`)

files.forEach(function (file) {
    var relativePath = path.relative(args['<dir>'], file)
    var url = `${args['<public-path>'].replace(/\/$/, '')}/${relativePath.replace(/\.map/, '')}`

    var options = {
        url: 'https://api.atatus.com/api/browser/sourcemap',
        headers: {
            Authorization: `token ${adminApiKey}`,
        },
        formData: {
            sourcemap: fs.createReadStream(path.resolve(file)),
            url,
        },
    }

    if (args['--version']) options.formData.version = args['--version']

    return retry(function (bail, count) {
        if (count > 1) {
            console.log(`retrying ${relativePath}, count: ${count}`)
        }

        return new Promise(function (resolve, reject) {
            request.post(options, function optionalCallback (err, response, body) {
                if (err) {
                    reject(new Error(err))
                } else if (response.statusCode !== 200) {
                    reject(new Error(body))
                } else {
                    console.log(`Atatus: uploaded sourcemap ${relativePath} for ${url}`)
                }
            })
        })
    }, { retries: 5 })
})
